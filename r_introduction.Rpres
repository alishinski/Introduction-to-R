Introduction to R
========================================================
author: Joshua Rosenberg and Alex Lishinski
date: 10/23/2015

ARRR Matey
========================================================

### Why we love R and Why we think you will love R, too

* R is free. As an open-source project, you can use R free of charge: no worries about subscription fees, license managers, or user limits.

* R is a language. In R, you do data analysis by writing functions and scripts, not by pointing and clicking. A script documents all your work, from data access to reporting, and can instantly be re-run at any time.

* Graphics and data visualization. One of the design principles of R was that visualization of data through charts and graphs is an essential part of the data analysis process. As a result, it has excellent tools for creating graphics.

* A flexible statistical analysis toolkit. All of the standard data analysis tools are built right into the R language.

Why we love R
=========================================================

* Access to powerful, cutting-edge analytics. Leading academics and researches from around the world use R to develop the latest methods in statistics, machine learning, and predictive modeling.

* A robust, vibrant community. There's a wealth of community resources for R available on the Web, for help in just about every domain.

* Unlimited possibilities. With R, you're not restricted to choosing a pre-defined set of routines. You can use code contributed by others in the open-source community, or extend R with your own functions.

* R is what is used by the majority of academic statisticians.  This is where new developments are going to be implemented.

Why we love R
=========================================================

* R is effectively platform independent.  For Linux/Mac users that work with people who use windows, this is helpful.

* R is used by practitioners in a plethora of academic disciplines.  R users come from myriad industries and academic departments.

* R makes you think.  Being forced to code a procedure by hand, though more time consuming, helps make it “stick”.

* All encompasing. there's probably already an R package for whatever you'll ever do with data, no need for many different softwares.

What's an object and how do I make one?
========================================================

This is code (syntax):

```{r, eval = F}
c() # makes a vector
: # makes a sequence
```

Let's make a vector of the numbers 1 to 10:

```{r}
my_vector <- c(1:10)
```

This is the result of typing the name of "my_vector":
```{r}
my_vector
```

Let's read something
========================================================

```{r, eval = F}
setwd("~/desktop")
my_data <- read.csv("r_introduction.csv", row.names = 1)
head(my_data)
```


What is a package and how do I install them?
========================================================

Here's how to install a package:
```{r, eval = F}
install.packages("ggplot2")
```

Here's how to use a package (must do every time you use R):
```{r}
library(ggplot2)
```

What are some helpful packages?
========================================================

There are over 7000 packages, covering pretty much every topic you'd want

```{r, eval = F}
# Great plotting functionality
library(ggplot2)
# Great data manipulation
library(dplyr)
# A number of basic statistical procedures you will want to use
library(psych)
# Miscellaneous functions that are quite useful
library(Hmisc)
# Importing data from other file formats, like .sav
library(foreign)
# Deal with dates in your data
library(lubridate)
```

What's this thing?
========================================================

```{r, eval = F}
- ? # this is to find out what a function does
- str() # this is to find out the 'structure' of anything
- View() # this allows you to view a data frame (think spreadsheet) or matrix
- class() # this tells you what kind of object this is
```

How do I get my data in?
========================================================

Examples of loading data for different sorts of files

```{r, eval = F}
readxl::read_excel("filename.xlsx")
read.csv("filename.csv", header = F)
haven::read_sav("filename.sav")
```

How do I pick just one part of this thing?
========================================================

```{r, eval = F}
my_data[1, ] # just the first row of data frame

my_data[, 1] # just the first column of data frame

head(my_data) # first six rows of data frame

tail(my_data) # last six rows of data frame
```

dplyr is a very useful package for data manipulation
========================================================

```{r, eval = F}
dplyr::select(my_data, ) # Select only certain columns

dplyr::filter(mydata, ) # select only certain rows

# how to find out more about how to use dplyr

# Vignettes are documents that explain how to use packages in fleshed out examples
vignette(package = "dplyr")
vignette("introduction", package = "dplyr")

dplyr::arrange(my_data, ) # arrange data by a variable
```

How do I do some basic statistics?
========================================================

Basic Descriptives

```{r, eval = F}
mean(my_data$math) # mean of continuous variable
sd(my_data$math) # standard deviation of continous variable
table(my_data$Race) # counts frequencies and creates a table
```

Descriptives table from psych

```{r, eval = F}
library(psych)
describe(my_data) # try it on your own!
```

Worked Example
========================================================

```{r}
# load built-in datasets
data(mtcars)

psych::describe(mtcars) # try it on your own!
```

Data manipulation with dplyr
========================================================

```{r}
# selecting only the columns I want
importantData <- dplyr::select(mtcars, mpg, cyl, disp, hp, wt)
head(importantData)

# Selecting only some rows
goodCars <- dplyr::filter(mtcars, cyl == 8, mpg > 15)
head(goodCars)

# Rearranging the data
sortedData <- dplyr::arrange(importantData, mpg)
head(sortedData)
```

The mighty lm() for linear models (i.e., regression) (Alex)
========================================================

```{r, eval = F}
data(mtcars) # get mtcars data

# create model and save as variable
model <- lm(mpg ~ cyl + disp + hp,  data = mtcars)
model

# get more detailed model summary
summary(model)

# anova table
anova(model)

assumps <- AutoModel::assumptions_check(model)
assumps
```

What are some other things we can do? (Alex & Josh)
========================================================

```{r, eval = F}
library(lavaan) # SEM
library(lme4) # HLM
library(tm) & library(quanteda) # text analysis / text mining
library(matchit) # PSM
library(caret) # machine learning
library(igraph) # social network analysis
```

Rmarkdown & knitr
=========================================================

Rmarkdown documents are documents that include plain text that can be styled with very simple syntax as well as executable R code

This presentation was made from an R markdown document

R markdown documents can be turned into nice looking pdf, word, and html files

Makes sharing results extremely easy

* Easy to make changes and rerun analyses
* No cutting and pasting values and tables
* Less time wasted formatting documents

Conclusion
======================================================

What you should take away from this?

* R is awesome
* There is a learning curve
* Everyone I know who waited to start R regrets it
* All the cool kids are using it
* Nobody can ever take it away from you